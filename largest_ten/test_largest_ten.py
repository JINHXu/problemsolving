#!/usr/bin/env/python3

import unittest
import time
import random

from largest_ten import find_largest

class TestLargestTen(unittest.TestCase):

    def test_positive(self):
        positives = [540, 861, 217, 31, 137, 964, 157, 95, 689, 72, 121, 929, 249, 333, 135, 311, 683, 385, 956, 262, 450, 200, 389, 49, 527, 443, 124, 402, 771, 604, 694, 185, 800, 40, 255, 55, 885, 597, 693, 7, 676, 603, 433, 904, 782, 8, 721, 919, 38, 670, 154, 589, 336, 423, 192, 878, 173, 144, 271, 65, 758, 576, 921, 355, 248, 177, 569, 797, 989, 12, 794, 27, 731, 116, 613, 137, 247, 204, 309, 471, 250, 334, 203, 183, 155, 583, 994, 942, 405, 97, 266, 800, 141, 230, 572, 144, 29, 789, 506, 683]
        
        largest_10 = [994, 989, 964, 956, 942, 929, 921, 919, 904, 885]

        self.assertEqual(largest_10, find_largest(positives))
    

    def test_integers(self):
        integers = [871, -535, -870, 908, -259, -367, -248, -776, -534, 150, -859, 121, -914, 409, 703, 472, -709, -219, -361, 475, -991, -476, 498, 44, 233, -159, 633, 118, 868, -381, 813, -878, -704, -578, -218, -677, 721, -53, -521, 995, -949, -746, 67, 115, -630, -926, -961, -482, 264, 356, 802, -1000, -215, 321, -924, 892, -130, -262, 295, -947, -992, 113, 368, -618, 367, -683, -567, -606, -310, -992, 854, -564, 836, 523, -497, -945, 293, -127, -227, 336, -123, 371, 219, -575, -197, 424, -313, 375, -644, 647, -925, 25, 647, -290, 818, -64, -469, 102, 802, -457]

        largest_10 = [995, 908, 892, 871, 868, 854, 836, 818, 813, 802]

        self.assertEqual(largest_10, find_largest(integers))


    def test_floats(self):
        floats = [0.4859830135169597, 0.7976216230115234, 0.8512255086349496, 0.32309027166821325, 0.5009742442180083, 0.05303448516920972, 0.7009167511274558, 0.06238866134085319, 0.5486961652626379, 0.7751066158109648, 0.6117091618889253, 0.7863737157830268, 0.05270778669596565, 0.4892939643633112, 0.08051443079573528, 0.41532857513817845, 0.5753990201683488, 0.6883710322407077, 0.9756346788501897, 0.9702057514348362, 0.2721733464515139, 0.10057526814801276, 0.22318352940479824, 0.9843907916736598, 0.6091067179569881, 0.9476983586076144, 0.7143455460228194, 0.002571818536920234, 0.8954185102583336, 0.8877680424494048, 0.08920073219340197, 0.5519220567028631, 0.8799305022929438, 0.18678223931279814, 0.657319347798615, 0.45979886957116334, 0.6716449839496277, 0.04225094695228826, 0.8335776648822849, 0.7426800962463892, 0.5982458556071081, 0.5169814619758037, 0.9092031300287415, 0.20369989500981378, 0.5962099507093299, 0.9686513686257938, 0.6041613902373278, 0.9158852824485504, 0.392459042233158, 0.8983352731437217, 0.40050766394640247, 0.7286244919115251, 0.7877248327512808, 0.42921440496461905, 0.8921492924086186, 0.7717024363844813, 0.7674906885349893, 0.8043347189233424, 0.39572248612521, 0.7382674437971858, 0.11228013247342605, 0.25162110144013894, 0.46358776057252926, 0.46922981853952206, 0.18680714236059015, 0.29348418392766074, 0.22642608240001139, 0.9178158673920314, 0.8579577846591041, 0.32017811920756256, 0.8977723153123975, 0.9829007813057435, 0.0703238334501769, 0.47269092666306867, 0.9355231857064745, 0.16890297428931678, 0.9266411814243022, 0.2957078934568447, 0.044111014402655635, 0.6561718273721437, 0.4634312172075058, 0.4751854140369993, 0.6308514058703526, 0.7909900723951011, 0.17053716939458985, 0.47226521867368865, 0.06752245121465483, 0.3569997064347048, 0.5244307673053438, 0.12474445887929098, 0.4317648787443188, 0.06817076621051799, 0.12601400000521468, 0.1825778912534356, 0.6971553960486333, 0.30138704384775394, 0.40122744383453146, 0.582114723070959, 0.8290568115199861, 0.7340568620956334]

        largest_10 = [0.9843907916736598, 0.9829007813057435, 0.9756346788501897, 0.9702057514348362, 0.9686513686257938, 0.9476983586076144, 0.9355231857064745, 0.9266411814243022, 0.9178158673920314, 0.9158852824485504]

        self.assertEqual(largest_10, find_largest(floats))


    def test_speed(self):

        long_seq = [random.random() for i in range(1000 * 1000 * 10)]

        start_timer = time.perf_counter()
        find_largest(long_seq)
        end_timer = time.perf_counter()
        fl_time = end_timer - start_timer
        print("\nsorting using find_largest %.2f" % fl_time)

        start_timer = time.perf_counter()
        sorted(long_seq, reverse=True)[:10]
        end_timer = time.perf_counter()
        sort_time = end_timer - start_timer
        print("\nsorting using list.sort %.2f" % sort_time)

        self.assertLess(fl_time, sort_time)


if __name__ == "__main__":
    unittest.main()